COMPILER Tastier

   const int // object kinds
      var = 0, proc = 1, constant = 3, array = 4;

   const int // types
      undef = 0, integer = 1, boolean = 2;

   public SymbolTable tab;
   public CodeGenerator gen;

/*-------------------------------------------------------------------------------------------*/

CHARACTERS

  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.
  digit = "0123456789".
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  stringCh = ANY - '"' - '\\' - cr - lf - tab.
  printableCh = '\u0020' .. '\u007e'.

/*-------------------------------------------------------------------------------------------*/

TOKENS

  number = digit { digit }.
  ident = letter { letter | digit }.
  string = '"' {stringCh | '\\' printableCh} '"'.

/*-------------------------------------------------------------------------------------------*/

COMMENTS FROM "//" TO lf
COMMENTS FROM "/*" TO "*/" NESTED

/*-------------------------------------------------------------------------------------------*/

IGNORE cr + lf + tab

/*-------------------------------------------------------------------------------------------*/

PRODUCTIONS

AddOp<out Op op>
=                        (. op = Op.ADD; .)
  ( '+'
  | '-'                  (. op = Op.SUB; .)
  )
.

/*-------------------------------------------------------------------------------------------*/

Expr<out int reg,        // load value of Expr into register
     out int type>       (. int typeR, regR; Op op; .)

  = SimExpr<out reg,
            out type>
  [ RelOp<out op>
    SimExpr<out regR,
            out typeR>   (.
                            if (type == typeR) {
                               type = boolean;
                               gen.RelOp(op, reg, regR);
                            }
                            else SemErr("incompatible types");
                         .)



   ]                     (. gen.ClearRegisters(); .)





.

/*-------------------------------------------------------------------------------------------*/

Primary<out int reg,     // load Primary into register
        out int type>    (. int n, ix, offset; Obj obj; string name; .)
=                        (.
                            type = undef;
                            reg = gen.GetRegister();
                         .)



  ( Ident<out name>
      (
                            (.
                            obj = tab.Find(name); type = obj.type;
                            if (obj.kind == var | obj.kind == constant)
                            {

                              //check if the variable being referenced is a parameter.
                              if(obj.isParam == true)
                              {

                              //get parameters offset
                                offset = obj.offset + 1 ;
                              //load the value of the parameter into reg
                                gen.loadParam(reg,offset,name);
                              }
                              else
                              {

                                 if (obj.level == 0)
                                    gen.LoadGlobal(reg, obj.adr, name);
                                 else
                                    gen.LoadLocal(reg, tab.curLevel-obj.level, obj.adr, name);

                                 if (type == boolean)
                                    gen.ResetZ(reg);
                                }

                            }
                            else SemErr("variable expected");
                            .)

  |

/*----- adding an array element as a Primary --------*/

"["


number           (. ix = Convert.ToInt32(t.val); .)
                 (.
                 obj = tab.Find(name); type = obj.type;

                 //check if element that is being accessed is within bounds of the array.
                 if(ix >= obj.length) SemErr(" array out of bounds");

                 if (obj.kind == array) {

                 //check if the variable being referenced is a parameter.
                 if(obj.isParam == true)
                 {
                 //get parameters offset
                   offset = obj.offset + 1 ;

                 //load adr into R2.
                   gen.loadParamAdr(offset);
                  //load the value of the adr + ix into reg
                   gen.LoadIndexedGlobalValue(reg,ix,name);
                 }


                 else
                 {

                        if (obj.level == 0)
                           gen.LoadIndexedGlobal(reg, obj.adr,ix, name);
                        else
                           gen.LoadIndexedLocal(reg, tab.curLevel-obj.level, obj.adr,ix, name);
                        if (type == boolean)
                           gen.ResetZ(reg);
                  }

                    }
                 else SemErr("array expected");
                  .)

"]"

)


/*----- adding  constant as a Primary --------

| "constant" Ident<out name>
                          (.

                            obj = tab.Find(name); type = obj.type;


                            if (obj.kind == constant) {
                               if (obj.level == 0)
                                  gen.LoadGlobal(reg, obj.adr, name);
                               else
                                  SemErr('constants can only be global');

                               if (type == boolean)
                                  gen.ResetZ(reg);
                            }
                            else SemErr("constant expected");

                          .)


--*/


  | number               (.
                            type = integer;
                            n = Convert.ToInt32(t.val);
                            gen.LoadConstant(reg, n);
                         .)

  | '-'
    Primary<out reg,
            out type>     (.
                            if (type == integer)
                               gen.NegateValue(reg);
                            else SemErr("integer type expected");
                         .)

  | "true"               (.
                               type = boolean;
                               gen.LoadTrue(reg);
                         .)

  | "false"              (.
                               type = boolean;
                               gen.LoadFalse(reg);
                         .)

  | '('
    Expr<out reg,
         out type>
    ')'

  )
.

/*-------------------------------------------------------------------------------------------*/

Ident<out string name>
= ident                  (. name = t.val; .)
.

/*-------------------------------------------------------------------------------------------*/

String<out string text>
= string                  (. text = t.val; .)
.

/*-------------------------------------------------------------------------------------------*/

MulOp<out Op op>
=                        (. op = Op.MUL; .)
  ( '*'
  | ("div" | "DIV")      (. op = Op.DIV; .)
  | ("mod" | "MOD")      (. op = Op.MOD; .)
  )
.

/*-------------------------------------------------------------------------------------------*/

//implementation of procedure with parameter passing by reference

ProcDecl<string progName>
                         (. Obj obj,paramObj; string procName; string name; string str;int type; object temp; ArrayList p = new ArrayList();int count =0;  .)
= "void"
  Ident<out procName>    (.
                            obj = tab.NewObj(procName, proc, undef);
                            if (procName == "main")
                               if (tab.curLevel == 0)
                                  tab.mainPresent = true;
                               else SemErr("main not at lexic level 0");
                            tab.OpenScope();
                         .)



  '('
    {
      Type<out type>
      Ident<out name>                 (. paramObj = tab.NewObj(name,var,type);

                                         //increase parameter count
                                         count = count + 1;

                                         //add the parameter into list associated with its function
                                         obj.paramList.Add(name);
                                         obj.typeList.Add(type);
                                         p.Add(name);

                                          //object is a parameter
                                         paramObj.isParam = true;
                                      .)

    ";"

    }



  ')'                                 (.
                                          //store parameter count into procedure.
                                          obj.paramCount = count;

                                          //reverse the ordering of the params in the stack, since the first param pushed first.
                                          //First In Last Out
                                          obj.paramList.Reverse();
                                          obj.typeList.Reverse();
                                          p.Reverse();

                                          //adjust the offset of each parameter, the index becomes the offset
                                          for(int i=0;i<p.Count;i++){
                                            temp = p[i];
                                            str = Convert.ToString(temp);
                                            obj = tab.Find(str);
                                            obj.offset = i;
                                          }
                                      .)


  '{'
     {
     VarDecl | ArrayDecl | ConstDef
     }

     {
     ProcDecl<progName>
     }                   (.
                            if (procName == "main")
                               gen.Label("Main", "Body");
                            else {
                               gen.ProcNameComment(procName);
                               gen.Label(procName, "Body");
                            }
                         .)
     Stat { Stat }
  '}'                    (.
                            if (procName == "main") {
                               gen.StopProgram(progName);
                               gen.Enter("Main", tab.curLevel, tab.topScope.nextAdr);
                            } else {
                               gen.Return(procName);
                               gen.Enter(procName, tab.curLevel, tab.topScope.nextAdr);
                            }
                            tab.CloseScope();
                         .)
.

/*-------------------------------------------------------------------------------------------*/

RelOp<out Op op>
=                        (. op = Op.EQU; .)
  ( "="
  | '<'                  (. op = Op.LSS; .)
  | '>'                  (. op = Op.GTR; .)
  | "!="                 (. op = Op.NEQ; .)
  | "<="                 (. op = Op.LEQ; .)
  | ">="                 (. op = Op.GEQ; .)
  )
.

/*-------------------------------------------------------------------------------------------*/

SimExpr<out int reg,     //load value of SimExpr into register
        out int type>    (. int typeR, regR; Op op; .)
= Term<out reg,
       out type>
  { AddOp<out op>
    Term<out regR,
         out typeR>      (.
                            if (type == integer && typeR == integer)
                               gen.AddOp(op, reg, regR);
                            else SemErr("integer type expected");
                         .)
  }
.

/*-------------------------------------------------------------------------------------------------------------------*/


Stat                     (. int type, type1, type2,adrReg,offset,first, ix, cnt; string name,name2; Obj obj, param; int reg, reg1, reg2;object typeObj;int numofParams =0;.)

=

/*--- implementation of array statement ----*/

Ident<out name>        (. obj = tab.Find(name); .)

(

   "["
                        //convert string into int to get index
  number                (. ix = Convert.ToInt32(t.val);  .)

                        //check for out of bounds
                        (. if(ix >= obj.length) SemErr(" array out of bounds"); .)

  "]"


  ":="
                                  //store the result
  Expr<out reg, out type> ';'     (. if (type == obj.type)
                                      if(obj.level == 0)
                                        gen.StoreIndexedGlobal(reg,obj.adr,ix,name);
                                      else gen.StoreIndexedLocal(reg,tab.curLevel-obj.level, obj.adr,ix, name);
                                  .)




/*---------------------------------------------------------------------------------------------------------------------*/



|

/*---- implementation of conditional statement -----*/

   ":="                 (.
                            if (obj.kind != var)
                               SemErr("cannot assign to procedure");
                         .)

    Expr<out reg,
         out type>    (.
                            if (type == obj.type)

                            //check if the variable being referenced is a paramter
                            if(obj.isParam==true){
                            //get parameters offset
                              offset = obj.offset + 1;
                            //get parameters value from the stack.
                              gen.storeParam(reg,offset,name);

                            }
                            else{
                               if (obj.level == 0)
                                  gen.StoreGlobal(reg, obj.adr, name);
                               else gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr, name);
                               }
                         .)


[


    "?"                     (.  int l1,l2; l2=0; l1=0; .)
                            (.
                               if (type == boolean) {
                               l2 = gen.NewLabel();
                               l1 = gen.NewLabel();

                               //if evaluates to false branch to the next Statment, dont evalue first expression
                               gen.BranchFalse(l2);
                            }
                            else SemErr("boolean type expected");
                         .)



      Expr<out reg1,
         out type1>       (.


                            if (type1 == obj.type)
                               if (obj.level == 0)
                                  gen.StoreGlobal(reg1, obj.adr, name);
                               else gen.StoreLocal(reg1, tab.curLevel-obj.level, obj.adr, name);
                               gen.Branch(l1);

                               //start label for the next expression
                               gen.Label(l2);
                         .)


     ":"



      Expr<out reg2,
         out type2>       (.

                            if (type2 == obj.type)
                               if (obj.level == 0)
                                  gen.StoreGlobal(reg2, obj.adr, name);
                               else gen.StoreLocal(reg2, tab.curLevel-obj.level, obj.adr, name);

                            gen.Label(l1);

                         .)


]

";"


/*-------------------------------------------------------------------------------------------------------------------------------*/
/*- can not redefine constants --*/

| "<-"               (.
            SemErr("cannot redefine a constant variable");
                     .)

/*-------------------------------------------------------------------------------------------------------------------------------*/

/*-- push the address of the formal arguments on to  the stack --*/


  | '('                            (.
                                      if (obj.kind != proc)
                                      {
                                         SemErr("object is not a procedure");
                                      }
                                      cnt = obj.paramList.Count - 1;
                                   .)

    {


    Ident<out name2>                 (.
                                        param = tab.Find(name2);

                                        //type checking
                                        if(cnt >= 0 ){
                                        typeObj = obj.typeList[cnt];
                                        type = Convert.ToInt32(typeObj);

                                        if(param.type != type){
                                          SemErr("parameter type mismatch in procedure " + name);
                                        }

                                        }


                                        //parameter count checking
                                        else{
                                        SemErr("number of parameters do not match in procedure " + name);
                                        }

                                        if (param.kind == var)
                                       {
                                          adrReg = gen.GetRegister();

                                          //increment number of parameter
                                          numofParams = numofParams + 1;


                                          //global or local variable?
                                          if (param.level == 0)
                                          {
                                            SemErr(name2 + " is global, only local variables allowed to be passed ");

                                          }
                                          else
                                          {
                                             //if variable being passed is a local variable
                                             gen.LoadLocalAddress(tab.curLevel - param.level, param.adr);
                                             gen.MoveRegister(adrReg,2);

                                          }

                                          //push the parameter onto stack
                                            gen.pushParam(adrReg);
                                            cnt = cnt -1;
                                       }

                                       else SemErr("variable expected");

                                    .)
    ";"

    }

      ')'


      ';'                          (.
                                      if(numofParams != obj.paramCount)
                                      {
                                        SemErr("number of parameters do not match for function " + name);
                                      }
                                      gen.Call(name);

                                   .)



  )
  /*-------------------------------------------------------------------------------------------------------------------------------*/
  /*- implementation for switch statement(extra feature added to Tastier)-*/

    | "switch"                    (. int thisReg,NthisReg,esc; int nextCase = 0; esc = 0;.)
      "("
      Expr<out reg,out type>       (. gen.ClearRegisters();
                                      thisReg = gen.GetRegister();
                                   .)
      ")"

  "{"

      "case"
      Expr<out reg2,out type2>      (.
                                      if(type2!=type){
                                      SemErr("type of switch case do not match");
                                      }
                                      else{

                                        //comapre the case value with the switch variable

                                        gen.RelOp(Op.EQU,reg2,thisReg);
                                        nextCase = gen.NewLabel();
                                        esc = gen.NewLabel();

                                        //if not equal branch to next case, to check its value with it
                                        gen.BranchFalse(nextCase);

                                        gen.ClearRegisters();

                                      }
                                    .)
      ":"
  [
      Stat
      "break"                           //if the case value matches the switch variable, execute the Stat and
                                        //branch to end of switch statement
      ";"                               (.  gen.Branch(esc);   .)
  ]


//there may be more that one case

    {
      "case"                         (.
                                          gen.Label(nextCase);
                                          gen.ClearRegisters();
                                          NthisReg = gen.GetRegister();
                                          gen.MoveRegister(NthisReg,thisReg);
                                      .)

      Expr<out reg1,out type1>      (.

                                      if(type1 != type){
                                      SemErr("type of switch case do not match");
                                      }
                                      else{

                                      //compare case value with switch variable
                                      gen.RelOp(Op.EQU,reg1,thisReg);
                                      nextCase = gen.NewLabel();
                                      gen.BranchFalse(nextCase);
                                      }

                                    .)

    ":"
  [
    Stat

    "break"                             //escape the switch statement after executing Stat
    ";"                               (.  gen.Branch(esc); .)
  ]
    }



    "default"                      (. gen.Label(nextCase);  .)
    ":"
  [
    Stat

    "break"
    ";"
  ]
    "}"                             (.
                                        gen.Label(esc);
                                    .)

/*-------------------------------------------------------------------------------------------------------------------------------*/



| "if"                   (. int l1, l2; l1 = 0; .)
  Expr<out reg,
       out type>         (.
                            if (type == boolean) {
                               l1 = gen.NewLabel();
                               gen.BranchFalse(l1);
                            }
                            else SemErr("boolean type expected");
                         .)
      Stat               (.
                            l2 = gen.NewLabel();
                            gen.Branch(l2);
                            gen.Label(l1);
                         .)
      [ "else"
      Stat
      ]               	 (. gen.Label(l2); .)




| "while"                (.
                            int l1, l2;
                            l1 = gen.NewLabel();
                            gen.Label(l1); l2=0;
                         .)
  Expr<out reg,
       out type>         (.
                            if (type == boolean) {
                               l2 = gen.NewLabel();
                               gen.BranchFalse(l2);
                            }
                            else SemErr("boolean type expected");
                         .)
   Stat                  (.
                            gen.Branch(l1);
                            gen.Label(l2);
                         .)



//for loop implementation

| "for"

  "("

  Stat                    (.
                              int l1,l2; l2=0;first=0;
                              first = gen.NewLabel();
                              gen.Branch(first);

                              //branch label to check condition again
                              l1 = gen.NewLabel();
                              gen.Label(l1);
                          .)



  Stat



   Expr<out reg,
       out type>         (.
                            if (type == boolean) {
                               l2 = gen.NewLabel();

                               //if the expression is false, branch to end else re-execute
                               gen.BranchFalse(l2);
                            }
                            else SemErr("boolean type expected");
                         .)
  ";"

  ")"

  "do"

    "{"                    (. gen.Label(first);  .)

    Stat                   (.

                              //execute statement and branch back to check for loop again
                             gen.Branch(l1);

                             //end of the for loop, branch here once the terminating condition becomes false
                             gen.Label(l2);
                          .)
    "}"





| "read"
  Ident<out name> ';'    (.
                            obj = tab.Find(name);
                            if (obj.type == integer) {
                               gen.ReadInteger();
                               if (obj.level == 0)
                                  gen.StoreGlobal(0, obj.adr, name);
                               else gen.StoreLocal(0, tab.curLevel-obj.level, obj.adr, name);
                            }
                            else SemErr("integer type expected");
                         .)

| "write"                (. string text; .)
  (
    Expr<out reg,
         out type>       (.
                            switch (type) {
                               case integer: gen.WriteInteger(reg, false);
                                             break;
                               case boolean: gen.WriteBoolean(false);
                                             break;
                            }
                         .)
  | String<out text>     (. gen.WriteString(text); .)
  )
  ';'

| "writeln"
  // note - for strings use write with \n in text
  Expr<out reg,
       out type>           (.
                              switch (type) {
                                 case integer: gen.WriteInteger(reg, true);
                                               break;
                                 case boolean: gen.WriteBoolean(true);
                                               break;
                              }
                           .)
  ';'

| '{'                      (. tab.OpenSubScope(); .)
  { VarDecl | ArrayDecl | ConstDef }
  Stat { Stat }
  '}'                      (. tab.CloseSubScope(); .)
.

/*-------------------------------------------------------------------------------------------*/

Tastier                  (. string progName; .)
  = "program"
  Ident<out progName>    (. tab.OpenScope(); .)
  '{'
    { ArrayDecl | VarDecl | ConstDef  }          // global variables
    { Stat }
    { ProcDecl<progName> }
                         (. tab.CloseScope(); .)
  '}'
.

/*-------------------------------------------------------------------------------------------*/

Term<out int reg,        // load value of Term into register
     out int type>       (. int typeR, regR; Op op; .)
  = Primary<out reg,
            out type>
  { MulOp<out op>
    Primary<out regR,
            out typeR>
                         (.
                            if (type == integer && typeR == integer)
                               gen.MulOp(op, reg, regR);
                            else SemErr("integer type expected");
                         .)
  }
.

/*-------------------------------------------------------------------------------------------*/

Type<out int type>
=                        (. type = undef; .)
 ( "int"                 (. type = integer; .)
 | "bool"                (. type = boolean; .)
 )
.

/*-------------------------------------------------------------------------------------------*/

VarDecl                  (. string name; int type; .)
= Type<out type>
  Ident<out name>        (. tab.NewObj(name, var, type); .)
  { ","
    Ident<out name>      (. tab.NewObj(name, var, type); .)
  } ";"
.


/*-------------------------------------------------------------------------------------------*/
/*-grammar for defining constants -*/


ConstDef                  (. string name; int type, reg; Obj obj; .)
= "constant"
 Type<out type>
  Ident<out name>        (. obj = tab.NewObj(name, constant, type); .)

 "<-"                 (.
                            if (obj.kind != constant)
                               SemErr("cannot assign to non constant");
                         .)
    Expr<out reg,
         out type> ';'   (.
                            if (type == obj.type)
                               if (obj.level == 0)
                                  gen.StoreGlobal(reg, obj.adr, name);

                                else gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr, name);

                          // else SemErr("can only define constants globally");

                         .)


.


/*-------------------------------------------------------------------------------------------*/
/*-grammar for defining array declarations -*/


ArrayDecl               (. string name; int type, len; .)
= "array"
Type<out type>          (. if(type != integer && type != boolean)  SemErr("array contents can only be of type int or boolean");    .)
Ident<out name>

"["
                        //  convert the string into integer to get the size of the array and store the size 
number                  (.len = Convert.ToInt32(t.val); .)

"]"
";"                     (. tab.NewObj(name, array, type);

                          //allocate space for the elements of the array in the symbol table
                           tab.allocateArray(name,len);
                        .)

.

/*-------------------------------------------------------------------------------------------*/




END Tastier.
